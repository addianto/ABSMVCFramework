module Framework.ModelData;
export *;

data Database<A> = EmptyDB | Cons(A, Database<A>);

def Int rowCount<A>(Database<A> db) = 
	case db
	{
		EmptyDB => 0;
		Cons(a, b) => 1 + rowCount(b);
	};

def A headRecord<A>(Database<A> db) = 
	case db
	{
		Cons(a, b) => a; 
	};

def Database<A> tailRecord<A>(Database<A> db) = 
	case db
	{
		Cons(a, b) => b;
	};

def Database<A> concatRecord<A>(Database<A> db1, Database<A> db2) =
	case db1
	{
		EmptyDB => db2;
		Cons(a, b) => Cons(a, concatRecord(b, db2));
	};

def Database<A> insertRecord<A>(Database<A> db, A record) = 
	concatRecord(db, Cons(record, EmptyDB));
